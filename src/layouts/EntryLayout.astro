---
import {
  blueLightColor,
  bluePrimaryColor,
  blueSecondaryColor,
  grayLightColor,
  whiteColor,
  blackColor,
  grayColor,
} from "../components/DefineVars.astro";

interface Heading {
  depth: number;
  slug: string;
  text: string;
}

interface Props {
  headings: Heading[];
}

const { headings } = Astro.props;
---

<style
  is:global
  define:vars={{
    blueLightColor,
    grayLightColor,
    bluePrimaryColor,
    blueSecondaryColor,
    blackColor,
    grayColor,
  }}
>
  .content-wrapper {
    h1 {
      border-bottom: 2px solid var(--blueLightColor);
    }
    h2 {
      border-bottom: 1px solid var(--blueLightColor);
    }
    pre {
      padding: 8px;
      border-radius: 4px;
      margin: 0;
    }
    div + pre {
      border-top-left-radius: 0;
    }
    :not(pre) > code {
      color: var(--blueSecondaryColor);
      background-color: var(--grayLightColor);
      padding: 2px 4px;
      border-radius: 2px;
    }
    img {
      max-width: 100%;
    }
    a {
      color: var(--blueSecondaryColor);
    }
    video {
      width: 100%;
    }
    table {
      border-radius: 4px;
      border-collapse: collapse;
    }
    th {
      background-color: var(--bluePrimaryColor);
      color: var(--whiteColor);
    }
    th,
    td {
      word-break: break-all;
      overflow-wrap: break-word;
      word-wrap: break-word;
      border: 1px solid var(--grayLightColor);
      padding: 0.5em 1em;
      &:first-child {
        word-break: initial;
      }
    }
    summary {
      background-color: var(--blueDarkColor);
      padding: 2px 6px;
      padding-bottom: 4px;
      color: var(--whiteColor);
      fill: var(--whiteColor);
      border-radius: 6px;
      svg {
        margin-right: 6px;
      }
    }
    details[open] summary {
      border-radius: 6px 6px 0 0;
    }
    .remark-code-title {
      background-color: var(--blueDarkColor);
      color: var(--whiteColor);
      margin: 0;
      display: inline;
      border-radius: 4px 4px 0 0;
      padding: 0 6px;
    }
    .remark-code-container {
      margin: 13px 0;
    }
  }
  .dark .content-wrapper {
    :not(pre) > code {
      color: var(--blueLightColor);
      background-color: var(--blackColor);
    }
    h1,
    h2 {
      border-bottom-color: var(--bluePrimaryColor);
    }
    a {
      color: var(--bluePrimaryColor);
    }
    .remark-code-title {
      background-color: var(--blackColor);
      color: var(--whiteColor);
    }
    summary {
      background-color: var(--blackColor);
    }
    tr:has(th) {
      border-left: 1px solid var(--blueSecondaryColor);
      border-right: 1px solid var(--blueSecondaryColor);
    }
    th {
      background-color: var(--blueSecondaryColor);
    }
    th,
    td {
      border: 1px solid var(--grayColor);
    }
  }
</style>

<style
  define:vars={{
    blueSecondaryColor,
    whiteColor,
    blueLightColor,
  }}
>
  .page-wrapper {
    display: flex;
  }
  .content-wrapper {
    flex-grow: 1;
    min-width: 0;
    background-color: var(--whiteColor);
    padding: 20px;
    border-radius: 4px;
    max-width: 100%;
    box-sizing: border-box;
  }
  .headings-wrapper {
    flex-shrink: 0;
    width: 300px;
    box-sizing: border-box;
  }
  .headings-sticky-wrapper {
    padding: 16px;
    max-height: 100vh;
    position: sticky;
    top: calc(62px + 20px);
  }
  .headings-wrapper {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      margin: 0;
      margin-bottom: 10px;
    }
    a {
      color: var(--blueSecondaryColor);
      text-decoration: none;
    }
  }
  @media screen and (max-width: 1200px) {
    .headings-wrapper {
      width: 200px;
    }
  }
  @media screen and (max-width: 1000px) {
    .headings-wrapper {
      display: none;
    }
  }
  :global(.dark) {
    .content-wrapper {
      background-color: var(--blueDarkColor);
    }
    .headings-wrapper {
      a {
        color: var(--blueLightColor);
      }
    }
  }
</style>

<div class="page-wrapper">
  <div class="content-wrapper">
    <slot />
  </div>
  <div class="headings-wrapper">
    <div class="headings-sticky-wrapper">
      {
        headings.map((heading) => {
          if (heading.depth === 1) {
            return (
              <h4>
                <a href={`#${heading.slug}`}>{heading.text}</a>
              </h4>
            );
          } else if (heading.depth === 2) {
            return (
              <h5>
                <a href={`#${heading.slug}`}>{heading.text}</a>
              </h5>
            );
          }
        })
      }
    </div>
  </div>
</div>
