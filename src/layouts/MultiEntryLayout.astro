---
import { getCollection } from "astro:content";
import EntryLayout from "./EntryLayout.astro";
import {
  whiteColor,
  blueSecondaryColor,
  bluePrimaryColor,
  blueLightColor,
} from "../components/DefineVars.astro";

const entries = await getCollection("docs");

interface Heading {
  depth: number;
  slug: string;
  text: string;
}

interface Props {
  directory: string;
  headings: Heading[];
  slug: string;
}

const { directory, headings, slug } = Astro.props;
---

<style
  define:vars={{
    whiteColor,
    blueSecondaryColor,
    bluePrimaryColor,
    blueLightColor,
  }}
>
  .multi-entry-wrapper {
    display: flex;
    flex-direction: row;
  }
  .entries-list {
    width: 280px;
    flex-shrink: 0;
    margin-right: 8px;
    .child-item {
      margin-left: 8px;
      border-left: 1px solid var(--bluePrimaryColor);
      padding-left: 8px;
      a {
        color: var(--bluePrimaryColor);
      }
      a:hover {
        color: var(--blueSecondaryColor);
      }
      &.selected a {
        color: var(--whiteColor);
        background-color: var(--bluePrimaryColor);
        border-radius: 4px;
        font-weight: bold;
      }
    }
    .index-item {
      a {
        font-size: 18px;
        color: var(--blueSecondaryColor);
        font-weight: bold;
      }
      &.selected a {
        color: var(--whiteColor);
        background-color: var(--bluePrimaryColor);
        border-radius: 4px;
      }
    }
    a {
      display: block;
      width: 100%;
      padding: 0 4px;
      text-decoration: none;
      box-sizing: border-box;
    }
  }
  .entries-sticky-list {
    height: calc(100vh - 82px - 40px);
    background-color: var(--whiteColor);
    position: sticky;
    top: 82px;
    padding: 16px;
    border-radius: 4px;
    box-sizing: border-box;
    overflow-y: auto;
  }
  .entry-wrapper {
    flex: 1;
  }
  .entries-sticky-list > div {
    padding-bottom: 2px;
  }
  @media screen and (max-width: 900px) {
    .multi-entry-wrapper {
      flex-direction: column;
    }
    .entries-list,
    .entries-sticky-list {
      height: auto;
      width: 100%;
      max-height: 200px;
      margin-bottom: 12px;
    }
  }
  :global(.dark.dark) {
    .entries-sticky-list {
      background-color: var(--blueDarkColor);
    }
    .entries-list {
      .index-item {
        &.selected a {
          color: var(--blackColor);
          background-color: var(--blueLightColor);
        }
        a {
          color: var(--blueLightColor);
        }
      }
      .child-item {
        a:hover {
          color: var(--blueLightColor);
        }
        &.selected a {
          color: var(--blackColor);
          background-color: var(--blueLightColor);
        }
      }
    }
  }
</style>

<div class="multi-entry-wrapper">
  <div class="entries-list">
    <div class="entries-sticky-list">
      {
        entries
          .filter(
            (entry) =>
              entry.id.indexOf(directory + "/") !== -1 &&
              entry.id.indexOf("index.md") !== -1
          )
          .map((entry) => {
            const className = `index-item${slug.indexOf("/") === -1 ? " selected" : ""}`;
            return (
              <div class={className}>
                <a href={`/docs/${directory}`}>{entry.data.title}</a>
              </div>
            );
          })
      }
      {
        entries
          .filter(
            (entry) =>
              entry.id.indexOf(directory + "/") !== -1 &&
              entry.id.indexOf("index.md") === -1
          )
          .map((entry) => {
            const className = `child-item${slug === entry.slug ? " selected" : ""}`;
            return (
              <>
                <div class={className}>
                  <a href={`/docs/${entry.slug}`}>{entry.data.title}</a>
                </div>
              </>
            );
          })
      }
    </div>
  </div>
  <div class="entry-wrapper">
    <EntryLayout headings={headings}>
      <slot />
    </EntryLayout>
  </div>
</div>
